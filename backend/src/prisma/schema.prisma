// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  age              Int
  email            String          @unique
  password         String
  address          Address?
  image            String?
  hobbies          String[]
  friends          UserOnUser[]    @relation("UserFriendsUser")
  friendOf         UserOnUser[]    @relation("UserFriendsFriend")
  sentRequests     FriendRequest[] @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserOnUser {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @db.ObjectId
  friendId String @db.ObjectId
  user     User   @relation("UserFriendsUser", fields: [userId], references: [id])
  friend   User   @relation("UserFriendsFriend", fields: [friendId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  city       String?
  zip        Int
  state      String?
  country    String
  userId     String   @unique @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  locationId String   @unique @db.ObjectId
  location   Location @relation(fields: [locationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  lat     Float
  long    Float
  address Address?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FriendRequest {
  id         String              @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String              @db.ObjectId
  receiverId String              @db.ObjectId
  status     FriendRequestStatus
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  sender   User @relation("SentRequests", fields: [senderId], references: [id])
  receiver User @relation("ReceivedRequests", fields: [receiverId], references: [id])
}
